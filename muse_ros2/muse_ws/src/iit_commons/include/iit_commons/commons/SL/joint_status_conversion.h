/*
 * joint_status_conversion.h
 *
 *  Created on: Nov 4, 2013
 *      Author: Marco Frigerio
 */

#ifndef IIT_COMMONS_SL__JOINT_STATUS_CONVERSION_H_
#define IIT_COMMONS_SL__JOINT_STATUS_CONVERSION_H_

#include "SL.h"
#include "SL_user.h"
#include "iit/commons/dog/declarations.h"

/*! \file
 * \brief
 * This file contains facilities to convert the joint status variable between
 * SL data types and the Robotics Code Generator (Robogen in short) types,
 * ie <tt>iit::<robot>::%JointState</tt>.
 *
 * The template parameter of the classes with the static conversion functions
 * must be the traits class of the robot, which should be included in the code
 * generated by Robcogen.
 *
 * WARNING: all the conversion functions assume that the joint-IDs in the robot
 *  traits are ordered as in SL!!
 */

/**
 * \defgroup robcogen-sl Robcogen-SL
 * Miscellaneous facilities related to the usage of Robcogen-generated code
 * within SL.
 *
 * Classes within this module that are templates, usually require the traits
 * class generated by Robcogen as the template parameter.
 *
 * \ingroup SL
 */


namespace iit {
namespace commons {
namespace SL {


#define SLTOROBOGEN_COMMON_COPY(dest, srcfield) {           \
    for(int i=0; i<dog::jointsCount; i++) {            \
        dest( internal::jointID<ROBOT>(i) ) = state[i+1].srcfield; \
    } \
}

#define ROBOGENTOSL_COMMON_COPY(destfield, src) {        \
    for(int i=0; i<dog::jointsCount; i++) {                \
        state[i+1].destfield = src( internal::jointID<ROBOT>(i) );  \
    }                                                     \
}

namespace internal {

template<typename ROBOT>
inline typename dog::JointIdentifiers
jointID(int i)
{
    return (dog::orderedJointIDs[i]);
}

}

/*!
 * \brief Conversion of the joint status from SL to Robcogen
 *
 * Beware that all the conversion functions assume that the joint-IDs in the
 * robot traits are ordered as in SL!!
 *
 * \ingroup robcogen-sl
 */
template<typename ROBOT>
struct SLtoRobogen {

    typedef typename dog::JointState JointState;

    static inline void pos(const SL_Jstate* state, JointState& q)
    {
        SLTOROBOGEN_COMMON_COPY(q, th)
    }


    static inline void pos(const SL_DJstate* state, JointState& q)
    {
        SLTOROBOGEN_COMMON_COPY(q, th)
    }




    static inline void pos_vel(const SL_Jstate* state,
            JointState& _q, JointState& qd)
    {
        pos(state, _q);
        SLTOROBOGEN_COMMON_COPY(qd, thd)
    }


    static inline void pos_vel(const SL_DJstate* state,
            JointState& q, JointState& qd)
    {
        pos(state, q);
        SLTOROBOGEN_COMMON_COPY(qd, thd)
    }




    static inline void pos_vel_acc(const SL_Jstate* state,
            JointState& q,
            JointState& qd,
            JointState& qdd)
    {
        pos_vel(state, q, qd);
        SLTOROBOGEN_COMMON_COPY(qdd, thdd)
    }


    static inline void pos_vel_acc(const SL_DJstate* state,
            JointState& q,
            JointState& qd,
            JointState& qdd)
    {
        pos_vel(state, q, qd);
        SLTOROBOGEN_COMMON_COPY(qdd, thdd)
    }




    static inline void acc(const SL_DJstate* state, JointState& qdd)
    {
        SLTOROBOGEN_COMMON_COPY(qdd, thdd)
    }



    static inline void load(const SL_Jstate* state,
            JointState& tau)
    {
        SLTOROBOGEN_COMMON_COPY(tau, load)
    }

    static inline void u(const SL_Jstate* state,
            JointState& tau)
    {
        SLTOROBOGEN_COMMON_COPY(tau, u)
    }

    static inline void uff(const SL_DJstate* state,
            JointState& tau)
    {
        SLTOROBOGEN_COMMON_COPY(tau, uff)
    }


    static inline void all(const SL_Jstate* state,
            JointState& q,
            JointState& qd,
            JointState& qdd,
            JointState& tau)
    {
        pos_vel_acc(state, q, qd, qdd);
        load(state, tau);
    }

};

/*!
 * \brief Conversion of the joint status from Robcogen to SL
 *
 * Beware that all the conversion functions assume that the joint-IDs in the
 * robot traits are ordered as in SL!!
 *
 * \ingroup robcogen-sl
 */
template<typename ROBOT>
struct RobogenToSL {

    typedef typename dog::JointState JointState;

    static inline void pos(const JointState& q, SL_Jstate* state)
    {
        ROBOGENTOSL_COMMON_COPY(th, q)
    }
    static inline void pos(const JointState& q, SL_DJstate* state)
    {
        ROBOGENTOSL_COMMON_COPY(th, q)
    }

    static inline void vel(const JointState& qd, SL_Jstate* state)
    {
        ROBOGENTOSL_COMMON_COPY(thd, qd)
    }
    static inline void vel(const JointState& qd, SL_DJstate* state)
    {
        ROBOGENTOSL_COMMON_COPY(thd, qd)
    }

    static inline void acc(const JointState& qdd, SL_Jstate* state)
    {
        ROBOGENTOSL_COMMON_COPY(thdd, qdd)
    }
    static inline void acc(const JointState& qdd, SL_DJstate* state)
    {
        ROBOGENTOSL_COMMON_COPY(thdd, qdd)
    }

    static inline void pos_vel_acc(
            const JointState& q,
            const JointState& qd,
            const JointState& qdd,
            SL_Jstate* state)
    {
        pos(q,   state);
        vel(qd,  state);
        acc(qdd, state);
    }
    static inline void pos_vel_acc(
            const JointState& q,
            const JointState& qd,
            const JointState& qdd,
            SL_DJstate* state)
    {
        pos(q,   state);
        vel(qd,  state);
        acc(qdd, state);
    }


    static inline void load(const JointState& tau, SL_Jstate* state)
    {
        ROBOGENTOSL_COMMON_COPY(load, tau)
    }

    static inline void u(const JointState& tau, SL_Jstate* state)
    {
        ROBOGENTOSL_COMMON_COPY(u, tau)
    }

    static inline void uff(const JointState& tau, SL_DJstate* state)
    {
        ROBOGENTOSL_COMMON_COPY(uff, tau)
    }

};

#undef SLTOROBOGEN_COMMON_COPY
#undef ROBOGENTOSL_COMMON_COPY

}
}
}


#endif /* IIT_COMMONS_SL__JOINT_STATUS_CONVERSION_H_ */
